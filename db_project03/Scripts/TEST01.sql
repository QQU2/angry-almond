/* 다음의 요구 사항에 맞추어 데이터 베이스 작업을 진행 한다.
 *     1. 관리자 계정으로 devAdmin 계정을 새로 만들고 데이터베이스 원격 접속과
 *        테이블 생성, 수정, 삭제 / 데이터 추가, 수정, 삭제 / 뷰 테이블 생성을
 *        할 수 있는 권한을 부여 한다.
 */
--관리자 계정으로 새로운 계정 만들기
CREATE USER devAdmin IDENTIFIED BY DEVADMIN;
--권한 부여하기
GRANT RESOURCE, CONNECT TO devAdmin;
GRANT INSERT ANY TABLE, UPDATE ANY TABLE,
	  DELETE ANY TABLE, CREATE VIEW, CREATE SESSION TO devAdmin;
	 
ALTER USER devAdmin quota 10M ON USERS;
--USER 있는지 확인
SELECT * FROM ALL_USERS WHERE USERNAME ='DEVADMIN';
--역할 부여되어 있는지 확인
SELECT * FROM DBA_ROLE_PRIVS WHERE GRANTEE = 'DEVADMIN';
-- 권한 부여되어 있는지 확인
SELECT * FROM DBA_SYS_PRIVS WHERE GRANTEE = 'DEVADMIN';


/* 2. devAdmin 계정으로 접속하고 회원관리를 위한 테이블(USER_ACCOUNT)을 생성한다. 테이블에는
 *    ID, 회원계정명, 회원패스워드, 회원이름 정보를 관리 할 수 있도록 컬럼을 생성한다.
 */
SELECT * FROM user_ROLE_PRIVS;
SELECT * FROM USER_SYS_PRIVS;
DROP TABLE USER_ACCOUNT;

CREATE TABLE USER_ACCOUNT(
	  ID		NUMBER CONSTRAINT PK_USER_ACCOUNT_ID PRIMARY KEY
	, NICKNAME	VARCHAR2(33) NOT NULL
	, PW		VARCHAR2(33) NOT NULL
	, NAME		VARCHAR2(33) NOT NULL
);

/* 3. 2 번에서 생성한 데이터베이스와 외래키로 관계를 맺는 회원정보 테이블(USER_INFO)을 생성한다.
 *   테이블에는 ID, 성별, 나이, 이메일, 주소, 전화번호 정보를 관리 할 수 있도록 컬럼을 생성한다.
 *    ID 컬럼은 USER_ACCOUNT 와 외래키 관계를 가지는 컬럼으로 생성한다.
 */

CREATE TABLE USER_INFO(
	  ID			NUMBER 		 CONSTRAINT PK_USER_INFO_ID PRIMARY KEY
	, GENDER		CHAR(1)		 CHECK(GENDER IN('M','F'))
	, AGE			NUMBER(3)	 CHECK(AGE BETWEEN 0 AND 199)
	, EMAIL			VARCHAR2(24)
	, ADDRESS		VARCHAR2(100)
	, PHONE_NUMBER	VARCHAR2(13)
	, CONSTRAINT FK_USER_INFO_ID FOREIGN KEY(ID) REFERENCES USER_ACCOUNT(ID)
);


/* 4. 2번, 3번에서 생성한 테이블에 데이터를 3개 추가 한다.
 *   데이터를 추가 할 때 ID 컬럼에 대해서는 SEQUENCE 객체를 사용하여 값이 자동으로 생성될 수 있게한다.
 */
--시퀀스
DROP SEQUENCE USER_ACCOUNT_SEQ;
CREATE SEQUENCE USER_ACCOUNT_SEQ;
CREATE SEQUENCE USER_INFO_SEQ;
SELECT USER_ACCOUNT_SEQ.NEXTVAL FROM DUAL;

--테이블
DROP TABLE USER_ACCOUNT;
DROP TABLE USER_INFO;
DELETE FROM USER_ACCOUNT WHERE ID<= 3;

SELECT * FROM USER_ACCOUNT ORDER BY ID;
SELECT * FROM USER_INFO;

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'USER_ACCOUNT';
ALTER TABLE USER_ACCOUNT DROP CONSTRAINT PK_USER_ACCOUNT_ID;

--데이터 추가(USER_ACCOUNT)
INSERT INTO USER_ACCOUNT VALUES(USER_ACCOUNT_SEQ.NEXTVAL, 'PINE', '1234', '최다연');
INSERT INTO USER_INFO VALUES(USER_ACCOUNT_SEQ.CURRVAL, 'F', '27', 'pine@naver.com', '구로', '010-4351-9449');

INSERT INTO USER_ACCOUNT VALUES(USER_ACCOUNT_SEQ.NEXTVAL, 'APPLE', '5678', '이언주');
INSERT INTO USER_INFO VALUES(USER_ACCOUNT_SEQ.CURRVAL, 'M', '35', 'apple@naver.com', '신대방', '010-4151-8662');

INSERT INTO USER_ACCOUNT VALUES(USER_ACCOUNT_SEQ.NEXTVAL, 'GRAPE', 'QWE123', '이한주');
INSERT INTO USER_INFO VALUES(USER_ACCOUNT_SEQ.CURRVAL, 'M', '31', 'grape@naver.com', '노량진', '010-7944-3365');

--데이터 추가(USER_INFO)

/* 5. VIEW 를 만들어서 두 개의 테이블 정보가 모두 조회될 수 있도록 한다.
 *   성별에 대해서는 남성, 여성으로 변환되게 하며, 패스워드는 * 문자로 마스킹 한다.
 */

CREATE OR REPLACE VIEW VIEW_USER AS 
SELECT UI.ID
	 , NAME
	 , DECODE(GENDER, 'F', '여성', 'M', '남성') AS 성별
	 , '****' AS 비밀번호
FROM USER_ACCOUNT UA
JOIN USER_INFO UI ON UA.ID = UI.ID
ORDER BY UI.ID;

SELECT * FROM VIEW_USER;