/* JOIN 
 * - from 절에 있는 테이블을 활용해 그 테이블에 접근하는 방식, 주로 where 절에서 사용
 * - 테이블명.컬럼명  => employees.manager_id 
 * - 별칭도 사용가능  =>FROM EMPLOYEES E, DEPARTMENTS D 
 * 				  WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID ;
 *
 */
SELECT *
FROM EMPLOYEES, DEPARTMENTS
WHERE EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID ;

SELECT *
FROM EMPLOYEES E
JOIN DEPARTMENTS D
  ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
--위와 같이 컬럼명이 같을 때 USING 사용
---> 해당 컬럼이 가장 마지막 행으로 나와서 묶임
 SELECT *
FROM EMPLOYEES E
JOIN DEPARTMENTS D
USING (DEPARTMENT_ID);

/* INNER JOIN/ OUTER JOIN(LEFT, RIGHT, FULL)
 * - INNER JOIN(기본): 두 개 이상의 테이블을 조인할 때 일치하는 값이 없는 행은 조인에서 제외됨
 * - OUTER JOIN: 일치하지 않은 값도 포함이 되며 반드시 OUTER JOIN 명시
 */
SELECT *
FROM EMPLOYEES E
RIGHT JOIN DEPARTMENTS D 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

SELECT DEPARTMENT_ID FROM EMPLOYEES; 
SELECT * FROM DEPARTMENTS;
SELECT * FROM EMPLOYEES;

/** CROSS JOIN(카데시안 곱) **/
SELECT COUNT(*) FROM EMPLOYEES e CROSS JOIN DEPARTMENTS d ; --COUNT = 2889
--위의 쿼리와 아래의 쿼리의 결과값은 같다.
SELECT X * Y AS TOTAL
  FROM (SELECT (SELECT COUNT(*) FROM EMPLOYEES)AS X
  			  ,(SELECT COUNT(*) FROM DEPARTMENTS) AS Y
  		  FROM DUAL
  	   );

/** NON_EQU JOIN
 * 	- 조건이 서로 일치하는 것이 아니라 범위에 해당할 때 사용
 */  	  
SELECT * FROM EMPLOYEES E JOIN JOBS J 
	ON E.SALARY BETWEEN J.MIN_SALARY AND J.MAX_SALARY;
SELECT * FROM JOBS ;	

/**SELF JOIN**/
SELECT * FROM EMPLOYEES E1 JOIN EMPLOYEES E2 
	ON E1.EMPLOYEE_ID = E2.MANAGER_ID; 